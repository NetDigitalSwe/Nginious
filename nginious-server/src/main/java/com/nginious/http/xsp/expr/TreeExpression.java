/**
 * Copyright 2012 NetDigital Sweden AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package com.nginious.http.xsp.expr;

import org.objectweb.asm.MethodVisitor;

/**
 * Evaluates an expression built up by a values tree node structure. The tree
 * structure is created by an expression parser which breaks up a mathematical
 * expression containing values, variables and operators into a tree structure.
 * 
 * @author Bojan Pisler, NetDigital Sweden AB
 * @see ExpressionParser
 * @see Value
 */
public class TreeExpression extends Expression {

    private Value value;
    
    /**
     * Constructs a new tree expression from the specified root values tree
     * node.
     * 
     * @param value the root values tree node
     */
    TreeExpression(Value value) {
        this.value = value;
    }
    
    /**
     * Evaluates this expression and returns the result as a boolean. The result
     * is converted to a boolean if needed.
     * 
     * @return the result of evaluating this expression converted to a boolean
     */
    protected boolean evaluateBoolean() {
    	return value.getBooleanValue();
    }
    
    /**
     * Evaluates this expression and returns the result as an integer.
     * The result is converted to an integer if needed.
     * 
     * @return the result of evaluating this expression converted to an integer
     */
    protected int evaluateInt() {
    	return value.getIntValue();
    }
    
    /**
     * Evaluates this expression and returns the result as a double.
     * The result is converted to a double if needed.
     * 
     * @return the result of evaluating this expression converted to a double
     */
    protected double evaluateDouble() {
    	return value.getDoubleValue();
    }
    
    /**
     * Evaluates this expression and returns the result as a string.
     * The result is converted to a string if needed.
     * 
     * @return the result of evaluating this expression converted to a string
     */
    protected String evaluateString() {
    	return value.getStringValue();
    }
    
    /**
     * Returns the value type that this expression produces when evaluated.
     * 
     * @return the type
     */
    public Type getType() {
    	return value.getType();
    }
    
    /**
     * Compiles this expression into bytecode using the specified method visitor.
     * 
     * @param visitor the method visitor
     */
    public void compile(MethodVisitor visitor) {
    	value.compile(visitor, null);
    }
    
    /**
     * Compiles this expression into bytecode using the specified method visitor.
     * The generated bytecode produces a values with the specified type.
     * 
     * @param visitor the method visitor
     * @param type the type
     */
    public void compile(MethodVisitor visitor, Type type) {
    	value.compile(visitor, type);
    }
}
